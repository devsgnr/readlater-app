scalar DateTime

type Query {
  hello: String!
  fetchMember: Member
  getUnpaidPayments: Int!
  getPayments(page: Int!, pageSize: Int!): PaymentPage!
  getMembershipFees: [MembershipFees]!
}

type Mutation {
  createMember(member: MemberInput!): Member!
  updateMember(updateMember: UpdateMemberInput!): Member!
  updateTotalDue(updateTotalDue: UpdateTotalDue!): Int!
  initializePayment(initPay: InitPaymentInput!): InitPaymentRes!
  createPayment(createPay: CreatePaymentInput!): CreatePaymentRes!
  updatePayment(updatePay: UpdatePaymentInput!): CreatePaymentRes!
}

# Member GraphQL Section
# Input Types
input MemberInput {
  certification: String
  profession: String
  role: String
  status: String
  totalDue: Int
  phoneNumber: String
  membershipFeeId: String
}

input UpdateMemberInput {
  userId: String
  certification: String
  profession: String
  role: String
  status: String
  totalDue: Int
  phoneNumber: String
  lastPaymentDate: DateTime
}

input UpdateTotalDue {
  amount: Int!
}

# Return Types
type Member {
  id: String
  userId: String
  certification: String
  profession: String
  role: String
  status: String
  totalDue: Int
  phoneNumber: String
  lastPaymentDate: DateTime
  membershipFee: MembershipFees
  membershipFeeId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type MembershipFees {
  id: String
  tier: String
  amount: Int
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

type User {
  id: String!
  name: String!
  email: String!
  emailVerified: Boolean!
  image: String
  member: Member
}

# Payment GraphQL Section
# Input Types
input InitPaymentInput {
  amount: Int!
}

input CreatePaymentInput {
  amount: Int!
  accessCode: String!
  description: String!
}

input UpdatePaymentInput {
  id: String!
  reference: String!
  trans: String!
  status: String!
  transaction: String!
  trxref: String!
  paymentDate: DateTime!
}

# Return Type
type InitPaymentRes {
  status: Boolean!
  message: String!
  data: InitPaymentResData!
}

type InitPaymentResData {
  authorization_url: String!
  access_code: String!
  reference: String!
}

type CreatePaymentRes {
  id: String!
  userId: String!
  accessCode: String!
  amount: Int!
  description: String!
  reference: String
  trans: String
  status: String
  transaction: String
  trxref: String
  paymentDate: DateTime
  periodYear: Int
  periodMonth: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaymentPage {
  items: [CreatePaymentRes!]!
  totalCount: Int!
  totalPages: Int!
  currentPage: Int!
  pageSize: Int!
}
