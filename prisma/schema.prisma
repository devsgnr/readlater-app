// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  member        Member?
  payments      Payment[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Member {
  id                String      @id @default(cuid())
  userId            String      @unique
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  certification     String?
  profession        String? 
  role              String?
  status            String?
  access_role       String?
  phoneNumber       String?
  revoked           Boolean     @default(false)

  lastPaymentDate   DateTime?
  totalDue          Int?
  membershipFeeId   String
  membershipFee     MembershipFee @relation(fields: [membershipFeeId], references: [id])

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([lastPaymentDate])
  @@map("member")
}

model MembershipFee {
  id            String @id @default(cuid())
  tier          String
  amount        Int
  description   String

  members       Member[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("membershipFee")
}

model Payment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  amount       Int
  description  String
  accessCode   String
  reference    String?
  trans        String?
  status       String?
  transaction  String?
  trxref       String?

  paymentDate  DateTime?
  periodYear   Int
  periodMonth  Int            

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, periodMonth, periodYear])
  @@index([periodMonth, periodYear])
  @@map("payment")
}